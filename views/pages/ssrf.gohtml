{{define "body"}}
<style type="text/css">
  .btn.active:focus {
    outline: none;
  }

  ul.selections {
    font-family: monospace;
    overflow: auto;
    list-style-type: none;
    padding: 0;
  }

  li[id*=-selection] {
    margin: 2px 2px 5px;
    float: left;
    clear: none;
  }
</style>
<h1 class="page-header">{{.Name}}</h1>
{{$routeInfo := index .Rulebar .Name}}
{{template "ruleInfo" $routeInfo}}
<div class="row">
  <div id="ssrf" class="col-xs-12 col-sm-6" style="padding-bottom: 30px;">
    <div style="overflow:auto">
      <p>Select library to use when performing the server-side request.</p>
      <ul id="libs-list" class="selections">
        <li id="default-selection">
          <button type="submit" class="btn btn-warning">http</button>
        </li>
        <li id="request-selection">
          <button type="submit" class="btn btn-warning" disabled="disabled">request</button>
        </li>
      </ul>
    </div>

    <div style="overflow:auto">
      <p>Select part of url to contain tracked data.</p>
      <ul id="url-list" class="selections">
        <li id="path-selection">
          <button type="submit" class="btn btn-warning">path</button>
        </li>
        <li id="query-selection">
          <button type="submit" class="btn btn-warning">query</button>
        </li>
      </ul>
    </div>
    <br>

    <div>
      <form action="/ssrf" method="GET" target="test-bench-ssrf">
        <p>The server will make a request to the following URL using the selected Golang package.</p>
        <pre id="constructed-url"></pre>
        <br>
        <label>Input Value</label>
        <br>
        <input name="input" class="form-control">
        <br>
        <button type="submit" class="btn btn-primary">Submit</button>

      </form>
    </div>
  </div>
</div>
<!--end old body-->


<script type="text/javascript">
  $(() => {
    const state = {
      action: '/ssrf/{lib}/{url}',
      requestURL: 'http://www.example.com',
      selectedLib: 'default',
      selectedURLPart: 'path'
    };

    $('#constructed-url').text(state.requestURL);

    $(`li[id='${state.selectedLib}-selection'] button`).toggleClass('active');
    $(`li[id='${state.selectedURLPart}-selection'] button`).toggleClass('active');

    // set the initial value on load so it is not empty
    if (state.selectedURLPart === 'path') {
      $('[name=input]').val(state.requestURL.substring(7));
    }

    $('#url-list button')
      .on('click', (e) => {
        state.selectedURLPart = $(e.target).text();
        toggleActiveSelection(e);
        setAction();
        updateValue()
      });

    $('#libs-list button')
      .on('click', (e) => {
        state.selectedLib = $(e.target).text();
        toggleActiveSelection(e);
        setAction();
      });

    $('[name=input]').on('keyup', (e) => {
      updateValue()
    });

    setAction();

    function updateValue() {
      let val = $('[name=input]').val()

      const url = val
        ? (state.selectedURLPart === 'path')
          ? "http://" + val
          : state.requestURL + "?input=" + val
        : state.requestURL

      $('#constructed-url').text(url)
    }

    function setAction() {
      const action = state
        .action
        .replace('{lib}', state.selectedLib)
        .replace('{url}', state.selectedURLPart);

      $('form').attr('action', action);
    }

    function toggleActiveSelection(e) {
      const target = $(e.target);
      target.addClass('active');
      target
        .parent()
        .siblings()
        .children('button')
        .removeClass('active')
    }
  });
</script>

{{end}}
{{template "ssrf" .}}