// Code generated by go-swagger; DO NOT EDIT.

package xss

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// XSSGetQuerySinkHandlerFunc turns a function with the right signature into a XSS get query sink handler
type XSSGetQuerySinkHandlerFunc func(XSSGetQuerySinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn XSSGetQuerySinkHandlerFunc) Handle(params XSSGetQuerySinkParams) middleware.Responder {
	return fn(params)
}

// XSSGetQuerySinkHandler interface for that can handle valid XSS get query sink params
type XSSGetQuerySinkHandler interface {
	Handle(XSSGetQuerySinkParams) middleware.Responder
}

// NewXSSGetQuerySink creates a new http.Handler for the XSS get query sink operation
func NewXSSGetQuerySink(ctx *middleware.Context, handler XSSGetQuerySinkHandler) *XSSGetQuerySink {
	return &XSSGetQuerySink{Context: ctx, Handler: handler}
}

/* XSSGetQuerySink swagger:route GET /xss/Sink/query/{safety} xss xssGetQuerySink

demonstrates Reflected XSS via query, with vulnerable function _

*/
type XSSGetQuerySink struct {
	Context *middleware.Context
	Handler XSSGetQuerySinkHandler
}

func (o *XSSGetQuerySink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewXSSGetQuerySinkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
