// Code generated by go-swagger; DO NOT EDIT.

package xss

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// XSSGetBufferedQuerySinkHandlerFunc turns a function with the right signature into a XSS get buffered query sink handler
type XSSGetBufferedQuerySinkHandlerFunc func(XSSGetBufferedQuerySinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn XSSGetBufferedQuerySinkHandlerFunc) Handle(params XSSGetBufferedQuerySinkParams) middleware.Responder {
	return fn(params)
}

// XSSGetBufferedQuerySinkHandler interface for that can handle valid XSS get buffered query sink params
type XSSGetBufferedQuerySinkHandler interface {
	Handle(XSSGetBufferedQuerySinkParams) middleware.Responder
}

// NewXSSGetBufferedQuerySink creates a new http.Handler for the XSS get buffered query sink operation
func NewXSSGetBufferedQuerySink(ctx *middleware.Context, handler XSSGetBufferedQuerySinkHandler) *XSSGetBufferedQuerySink {
	return &XSSGetBufferedQuerySink{Context: ctx, Handler: handler}
}

/* XSSGetBufferedQuerySink swagger:route GET /xss/Sink/buffered-query/{safety} xss xssGetBufferedQuerySink

demonstrates Reflected XSS via buffered-query, with vulnerable function _

*/
type XSSGetBufferedQuerySink struct {
	Context *middleware.Context
	Handler XSSGetBufferedQuerySinkHandler
}

func (o *XSSGetBufferedQuerySink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewXSSGetBufferedQuerySinkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
