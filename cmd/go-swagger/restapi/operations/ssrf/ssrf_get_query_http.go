// Code generated by go-swagger; DO NOT EDIT.

package ssrf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SsrfGetQueryHTTPHandlerFunc turns a function with the right signature into a ssrf get query HTTP handler
type SsrfGetQueryHTTPHandlerFunc func(SsrfGetQueryHTTPParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SsrfGetQueryHTTPHandlerFunc) Handle(params SsrfGetQueryHTTPParams) middleware.Responder {
	return fn(params)
}

// SsrfGetQueryHTTPHandler interface for that can handle valid ssrf get query HTTP params
type SsrfGetQueryHTTPHandler interface {
	Handle(SsrfGetQueryHTTPParams) middleware.Responder
}

// NewSsrfGetQueryHTTP creates a new http.Handler for the ssrf get query HTTP operation
func NewSsrfGetQueryHTTP(ctx *middleware.Context, handler SsrfGetQueryHTTPHandler) *SsrfGetQueryHTTP {
	return &SsrfGetQueryHTTP{Context: ctx, Handler: handler}
}

/*
	SsrfGetQueryHTTP swagger:route GET /ssrf/http/query/{safety} ssrf ssrfGetQueryHttp

demonstrates Server Side Request Forgery via query, with vulnerable function net/http
*/
type SsrfGetQueryHTTP struct {
	Context *middleware.Context
	Handler SsrfGetQueryHTTPHandler
}

func (o *SsrfGetQueryHTTP) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSsrfGetQueryHTTPParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
