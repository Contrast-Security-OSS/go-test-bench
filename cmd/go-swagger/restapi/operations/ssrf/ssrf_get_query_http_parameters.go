// Code generated by go-swagger; DO NOT EDIT.

package ssrf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewSsrfGetQueryHTTPParams creates a new SsrfGetQueryHTTPParams object
//
// There are no default values defined in the spec.
func NewSsrfGetQueryHTTPParams() SsrfGetQueryHTTPParams {

	return SsrfGetQueryHTTPParams{}
}

// SsrfGetQueryHTTPParams contains all the bound params for the ssrf get query HTTP operation
// typically these are obtained from a http.Request
//
// swagger:parameters SsrfGetQueryHTTP
type SsrfGetQueryHTTPParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*the user provided input for the query vulnerability
	  Required: true
	  In: query
	*/
	Input string
	/*safety qualifier
	  Required: true
	  In: path
	*/
	Safety string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSsrfGetQueryHTTPParams() beforehand.
func (o *SsrfGetQueryHTTPParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qInput, qhkInput, _ := qs.GetOK("input")
	if err := o.bindInput(qInput, qhkInput, route.Formats); err != nil {
		res = append(res, err)
	}

	rSafety, rhkSafety, _ := route.Params.GetOK("safety")
	if err := o.bindSafety(rSafety, rhkSafety, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindInput binds and validates parameter Input from query.
func (o *SsrfGetQueryHTTPParams) bindInput(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("input", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("input", "query", raw); err != nil {
		return err
	}
	o.Input = raw

	return nil
}

// bindSafety binds and validates parameter Safety from path.
func (o *SsrfGetQueryHTTPParams) bindSafety(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Safety = raw

	if err := o.validateSafety(formats); err != nil {
		return err
	}

	return nil
}

// validateSafety carries on validations for parameter Safety
func (o *SsrfGetQueryHTTPParams) validateSafety(formats strfmt.Registry) error {

	if err := validate.EnumCase("safety", "path", o.Safety, []interface{}{"safe", "unsafe", "noop"}, true); err != nil {
		return err
	}

	return nil
}
