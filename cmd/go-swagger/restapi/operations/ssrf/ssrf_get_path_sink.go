// Code generated by go-swagger; DO NOT EDIT.

package ssrf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SsrfGetPathSinkHandlerFunc turns a function with the right signature into a ssrf get path sink handler
type SsrfGetPathSinkHandlerFunc func(SsrfGetPathSinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SsrfGetPathSinkHandlerFunc) Handle(params SsrfGetPathSinkParams) middleware.Responder {
	return fn(params)
}

// SsrfGetPathSinkHandler interface for that can handle valid ssrf get path sink params
type SsrfGetPathSinkHandler interface {
	Handle(SsrfGetPathSinkParams) middleware.Responder
}

// NewSsrfGetPathSink creates a new http.Handler for the ssrf get path sink operation
func NewSsrfGetPathSink(ctx *middleware.Context, handler SsrfGetPathSinkHandler) *SsrfGetPathSink {
	return &SsrfGetPathSink{Context: ctx, Handler: handler}
}

/* SsrfGetPathSink swagger:route GET /ssrf/Sink/path/{safety} ssrf ssrfGetPathSink

demonstrates Server Side Request Forgery via path, with vulnerable function _

*/
type SsrfGetPathSink struct {
	Context *middleware.Context
	Handler SsrfGetPathSinkHandler
}

func (o *SsrfGetPathSink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSsrfGetPathSinkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
