// Code generated by go-swagger; DO NOT EDIT.

package ssrf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SsrfGetQuerySinkHandlerFunc turns a function with the right signature into a ssrf get query sink handler
type SsrfGetQuerySinkHandlerFunc func(SsrfGetQuerySinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SsrfGetQuerySinkHandlerFunc) Handle(params SsrfGetQuerySinkParams) middleware.Responder {
	return fn(params)
}

// SsrfGetQuerySinkHandler interface for that can handle valid ssrf get query sink params
type SsrfGetQuerySinkHandler interface {
	Handle(SsrfGetQuerySinkParams) middleware.Responder
}

// NewSsrfGetQuerySink creates a new http.Handler for the ssrf get query sink operation
func NewSsrfGetQuerySink(ctx *middleware.Context, handler SsrfGetQuerySinkHandler) *SsrfGetQuerySink {
	return &SsrfGetQuerySink{Context: ctx, Handler: handler}
}

/* SsrfGetQuerySink swagger:route GET /ssrf/Sink/query/{safety} ssrf ssrfGetQuerySink

demonstrates Server Side Request Forgery via query, with vulnerable function _

*/
type SsrfGetQuerySink struct {
	Context *middleware.Context
	Handler SsrfGetQuerySinkHandler
}

func (o *SsrfGetQuerySink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSsrfGetQuerySinkParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
