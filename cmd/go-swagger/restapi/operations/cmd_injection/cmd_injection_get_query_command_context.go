// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CmdInjectionGetQueryCommandContextHandlerFunc turns a function with the right signature into a cmd injection get query command context handler
type CmdInjectionGetQueryCommandContextHandlerFunc func(CmdInjectionGetQueryCommandContextParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CmdInjectionGetQueryCommandContextHandlerFunc) Handle(params CmdInjectionGetQueryCommandContextParams) middleware.Responder {
	return fn(params)
}

// CmdInjectionGetQueryCommandContextHandler interface for that can handle valid cmd injection get query command context params
type CmdInjectionGetQueryCommandContextHandler interface {
	Handle(CmdInjectionGetQueryCommandContextParams) middleware.Responder
}

// NewCmdInjectionGetQueryCommandContext creates a new http.Handler for the cmd injection get query command context operation
func NewCmdInjectionGetQueryCommandContext(ctx *middleware.Context, handler CmdInjectionGetQueryCommandContextHandler) *CmdInjectionGetQueryCommandContext {
	return &CmdInjectionGetQueryCommandContext{Context: ctx, Handler: handler}
}

/*
	CmdInjectionGetQueryCommandContext swagger:route GET /cmdInjection/exec.CommandContext/query/{safety} cmd_injection cmdInjectionGetQueryCommandContext

demonstrates Command Injection via query, with vulnerable function exec.CommandContext
*/
type CmdInjectionGetQueryCommandContext struct {
	Context *middleware.Context
	Handler CmdInjectionGetQueryCommandContextHandler
}

func (o *CmdInjectionGetQueryCommandContext) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCmdInjectionGetQueryCommandContextParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
