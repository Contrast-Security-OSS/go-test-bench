// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CmdInjectionGetCookiesCommandHandlerFunc turns a function with the right signature into a cmd injection get cookies command handler
type CmdInjectionGetCookiesCommandHandlerFunc func(CmdInjectionGetCookiesCommandParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CmdInjectionGetCookiesCommandHandlerFunc) Handle(params CmdInjectionGetCookiesCommandParams) middleware.Responder {
	return fn(params)
}

// CmdInjectionGetCookiesCommandHandler interface for that can handle valid cmd injection get cookies command params
type CmdInjectionGetCookiesCommandHandler interface {
	Handle(CmdInjectionGetCookiesCommandParams) middleware.Responder
}

// NewCmdInjectionGetCookiesCommand creates a new http.Handler for the cmd injection get cookies command operation
func NewCmdInjectionGetCookiesCommand(ctx *middleware.Context, handler CmdInjectionGetCookiesCommandHandler) *CmdInjectionGetCookiesCommand {
	return &CmdInjectionGetCookiesCommand{Context: ctx, Handler: handler}
}

/* CmdInjectionGetCookiesCommand swagger:route GET /cmdInjection/Command/cookies/{safety} cmd_injection cmdInjectionGetCookiesCommand

demonstrates Command Injection via cookies, with vulnerable function exec.Command

*/
type CmdInjectionGetCookiesCommand struct {
	Context *middleware.Context
	Handler CmdInjectionGetCookiesCommandHandler
}

func (o *CmdInjectionGetCookiesCommand) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCmdInjectionGetCookiesCommandParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
