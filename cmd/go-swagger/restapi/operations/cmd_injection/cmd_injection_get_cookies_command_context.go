// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CmdInjectionGetCookiesCommandContextHandlerFunc turns a function with the right signature into a cmd injection get cookies command context handler
type CmdInjectionGetCookiesCommandContextHandlerFunc func(CmdInjectionGetCookiesCommandContextParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CmdInjectionGetCookiesCommandContextHandlerFunc) Handle(params CmdInjectionGetCookiesCommandContextParams) middleware.Responder {
	return fn(params)
}

// CmdInjectionGetCookiesCommandContextHandler interface for that can handle valid cmd injection get cookies command context params
type CmdInjectionGetCookiesCommandContextHandler interface {
	Handle(CmdInjectionGetCookiesCommandContextParams) middleware.Responder
}

// NewCmdInjectionGetCookiesCommandContext creates a new http.Handler for the cmd injection get cookies command context operation
func NewCmdInjectionGetCookiesCommandContext(ctx *middleware.Context, handler CmdInjectionGetCookiesCommandContextHandler) *CmdInjectionGetCookiesCommandContext {
	return &CmdInjectionGetCookiesCommandContext{Context: ctx, Handler: handler}
}

/* CmdInjectionGetCookiesCommandContext swagger:route GET /cmdInjection/CommandContext/cookies/{safety} cmd_injection cmdInjectionGetCookiesCommandContext

demonstrates Command Injection via cookies, with vulnerable function exec.CommandContext

*/
type CmdInjectionGetCookiesCommandContext struct {
	Context *middleware.Context
	Handler CmdInjectionGetCookiesCommandContextHandler
}

func (o *CmdInjectionGetCookiesCommandContext) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCmdInjectionGetCookiesCommandContextParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
