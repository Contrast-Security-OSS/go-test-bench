// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetQueryCommandContextHandlerFunc turns a function with the right signature into a get query command context handler
type GetQueryCommandContextHandlerFunc func(GetQueryCommandContextParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetQueryCommandContextHandlerFunc) Handle(params GetQueryCommandContextParams) middleware.Responder {
	return fn(params)
}

// GetQueryCommandContextHandler interface for that can handle valid get query command context params
type GetQueryCommandContextHandler interface {
	Handle(GetQueryCommandContextParams) middleware.Responder
}

// NewGetQueryCommandContext creates a new http.Handler for the get query command context operation
func NewGetQueryCommandContext(ctx *middleware.Context, handler GetQueryCommandContextHandler) *GetQueryCommandContext {
	return &GetQueryCommandContext{Context: ctx, Handler: handler}
}

/* GetQueryCommandContext swagger:route GET /cmdInjection/exec.CommandContext/query/{safety} cmd-injection getQueryCommandContext

Used to demonstrate how user input data can be passed to exec.CommandContext


*/
type GetQueryCommandContext struct {
	Context *middleware.Context
	Handler GetQueryCommandContextHandler
}

func (o *GetQueryCommandContext) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetQueryCommandContextParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
