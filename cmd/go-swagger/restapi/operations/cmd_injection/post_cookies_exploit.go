// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCookiesExploitHandlerFunc turns a function with the right signature into a post cookies exploit handler
type PostCookiesExploitHandlerFunc func(PostCookiesExploitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCookiesExploitHandlerFunc) Handle(params PostCookiesExploitParams) middleware.Responder {
	return fn(params)
}

// PostCookiesExploitHandler interface for that can handle valid post cookies exploit params
type PostCookiesExploitHandler interface {
	Handle(PostCookiesExploitParams) middleware.Responder
}

// NewPostCookiesExploit creates a new http.Handler for the post cookies exploit operation
func NewPostCookiesExploit(ctx *middleware.Context, handler PostCookiesExploitHandler) *PostCookiesExploit {
	return &PostCookiesExploit{Context: ctx, Handler: handler}
}

/* PostCookiesExploit swagger:route POST /cmdInjection/{command}/cookies/{safety}/ cmd-injection postCookiesExploit

Demonstrates the command injection vulnerability with input through Cookie


*/
type PostCookiesExploit struct {
	Context *middleware.Context
	Handler PostCookiesExploitHandler
}

func (o *PostCookiesExploit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCookiesExploitParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
