// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCookiesCommandContextHandlerFunc turns a function with the right signature into a post cookies command context handler
type PostCookiesCommandContextHandlerFunc func(PostCookiesCommandContextParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCookiesCommandContextHandlerFunc) Handle(params PostCookiesCommandContextParams) middleware.Responder {
	return fn(params)
}

// PostCookiesCommandContextHandler interface for that can handle valid post cookies command context params
type PostCookiesCommandContextHandler interface {
	Handle(PostCookiesCommandContextParams) middleware.Responder
}

// NewPostCookiesCommandContext creates a new http.Handler for the post cookies command context operation
func NewPostCookiesCommandContext(ctx *middleware.Context, handler PostCookiesCommandContextHandler) *PostCookiesCommandContext {
	return &PostCookiesCommandContext{Context: ctx, Handler: handler}
}

/* PostCookiesCommandContext swagger:route POST /cmdInjection/exec.CommandContext/cookies/{safety}/ cmd-injection postCookiesCommandContext

Demonstrates the command injection vulnerability with input through Cookie


*/
type PostCookiesCommandContext struct {
	Context *middleware.Context
	Handler PostCookiesCommandContextHandler
}

func (o *PostCookiesCommandContext) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCookiesCommandContextParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
