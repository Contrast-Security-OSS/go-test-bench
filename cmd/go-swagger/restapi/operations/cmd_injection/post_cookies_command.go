// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCookiesCommandHandlerFunc turns a function with the right signature into a post cookies command handler
type PostCookiesCommandHandlerFunc func(PostCookiesCommandParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCookiesCommandHandlerFunc) Handle(params PostCookiesCommandParams) middleware.Responder {
	return fn(params)
}

// PostCookiesCommandHandler interface for that can handle valid post cookies command params
type PostCookiesCommandHandler interface {
	Handle(PostCookiesCommandParams) middleware.Responder
}

// NewPostCookiesCommand creates a new http.Handler for the post cookies command operation
func NewPostCookiesCommand(ctx *middleware.Context, handler PostCookiesCommandHandler) *PostCookiesCommand {
	return &PostCookiesCommand{Context: ctx, Handler: handler}
}

/* PostCookiesCommand swagger:route POST /cmdInjection/exec.Command/cookies/{safety}/ cmd-injection postCookiesCommand

Demonstrates the command injection vulnerability with input through Cookie


*/
type PostCookiesCommand struct {
	Context *middleware.Context
	Handler PostCookiesCommandHandler
}

func (o *PostCookiesCommand) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCookiesCommandParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
