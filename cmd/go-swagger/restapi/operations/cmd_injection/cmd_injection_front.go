// Code generated by go-swagger; DO NOT EDIT.

package cmd_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CmdInjectionFrontHandlerFunc turns a function with the right signature into a cmd injection front handler
type CmdInjectionFrontHandlerFunc func(CmdInjectionFrontParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CmdInjectionFrontHandlerFunc) Handle(params CmdInjectionFrontParams) middleware.Responder {
	return fn(params)
}

// CmdInjectionFrontHandler interface for that can handle valid cmd injection front params
type CmdInjectionFrontHandler interface {
	Handle(CmdInjectionFrontParams) middleware.Responder
}

// NewCmdInjectionFront creates a new http.Handler for the cmd injection front operation
func NewCmdInjectionFront(ctx *middleware.Context, handler CmdInjectionFrontHandler) *CmdInjectionFront {
	return &CmdInjectionFront{Context: ctx, Handler: handler}
}

/*
	CmdInjectionFront swagger:route GET /cmdInjection cmd_injection cmdInjectionFront

front page of the Command Injection vulnerability
*/
type CmdInjectionFront struct {
	Context *middleware.Context
	Handler CmdInjectionFrontHandler
}

func (o *CmdInjectionFront) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCmdInjectionFrontParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
