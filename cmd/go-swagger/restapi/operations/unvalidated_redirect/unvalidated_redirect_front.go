// Code generated by go-swagger; DO NOT EDIT.

package unvalidated_redirect

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UnvalidatedRedirectFrontHandlerFunc turns a function with the right signature into a unvalidated redirect front handler
type UnvalidatedRedirectFrontHandlerFunc func(UnvalidatedRedirectFrontParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UnvalidatedRedirectFrontHandlerFunc) Handle(params UnvalidatedRedirectFrontParams) middleware.Responder {
	return fn(params)
}

// UnvalidatedRedirectFrontHandler interface for that can handle valid unvalidated redirect front params
type UnvalidatedRedirectFrontHandler interface {
	Handle(UnvalidatedRedirectFrontParams) middleware.Responder
}

// NewUnvalidatedRedirectFront creates a new http.Handler for the unvalidated redirect front operation
func NewUnvalidatedRedirectFront(ctx *middleware.Context, handler UnvalidatedRedirectFrontHandler) *UnvalidatedRedirectFront {
	return &UnvalidatedRedirectFront{Context: ctx, Handler: handler}
}

/* UnvalidatedRedirectFront swagger:route GET /unvalidatedRedirect unvalidated_redirect unvalidatedRedirectFront

front page of the Unvalidated Redirect vulnerability

*/
type UnvalidatedRedirectFront struct {
	Context *middleware.Context
	Handler UnvalidatedRedirectFrontHandler
}

func (o *UnvalidatedRedirectFront) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUnvalidatedRedirectFrontParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
