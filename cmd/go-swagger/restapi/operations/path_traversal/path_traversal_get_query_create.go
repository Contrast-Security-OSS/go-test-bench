// Code generated by go-swagger; DO NOT EDIT.

package path_traversal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PathTraversalGetQueryCreateHandlerFunc turns a function with the right signature into a path traversal get query create handler
type PathTraversalGetQueryCreateHandlerFunc func(PathTraversalGetQueryCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PathTraversalGetQueryCreateHandlerFunc) Handle(params PathTraversalGetQueryCreateParams) middleware.Responder {
	return fn(params)
}

// PathTraversalGetQueryCreateHandler interface for that can handle valid path traversal get query create params
type PathTraversalGetQueryCreateHandler interface {
	Handle(PathTraversalGetQueryCreateParams) middleware.Responder
}

// NewPathTraversalGetQueryCreate creates a new http.Handler for the path traversal get query create operation
func NewPathTraversalGetQueryCreate(ctx *middleware.Context, handler PathTraversalGetQueryCreateHandler) *PathTraversalGetQueryCreate {
	return &PathTraversalGetQueryCreate{Context: ctx, Handler: handler}
}

/*
	PathTraversalGetQueryCreate swagger:route GET /pathTraversal/os.Create/query/{safety} path_traversal pathTraversalGetQueryCreate

demonstrates Path Traversal via query, with vulnerable function os.Create
*/
type PathTraversalGetQueryCreate struct {
	Context *middleware.Context
	Handler PathTraversalGetQueryCreateHandler
}

func (o *PathTraversalGetQueryCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPathTraversalGetQueryCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
