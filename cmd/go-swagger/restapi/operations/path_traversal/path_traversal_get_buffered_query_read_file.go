// Code generated by go-swagger; DO NOT EDIT.

package path_traversal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PathTraversalGetBufferedQueryReadFileHandlerFunc turns a function with the right signature into a path traversal get buffered query read file handler
type PathTraversalGetBufferedQueryReadFileHandlerFunc func(PathTraversalGetBufferedQueryReadFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PathTraversalGetBufferedQueryReadFileHandlerFunc) Handle(params PathTraversalGetBufferedQueryReadFileParams) middleware.Responder {
	return fn(params)
}

// PathTraversalGetBufferedQueryReadFileHandler interface for that can handle valid path traversal get buffered query read file params
type PathTraversalGetBufferedQueryReadFileHandler interface {
	Handle(PathTraversalGetBufferedQueryReadFileParams) middleware.Responder
}

// NewPathTraversalGetBufferedQueryReadFile creates a new http.Handler for the path traversal get buffered query read file operation
func NewPathTraversalGetBufferedQueryReadFile(ctx *middleware.Context, handler PathTraversalGetBufferedQueryReadFileHandler) *PathTraversalGetBufferedQueryReadFile {
	return &PathTraversalGetBufferedQueryReadFile{Context: ctx, Handler: handler}
}

/*
	PathTraversalGetBufferedQueryReadFile swagger:route GET /pathTraversal/os.ReadFile/buffered-query/{safety} path_traversal pathTraversalGetBufferedQueryReadFile

demonstrates Path Traversal via buffered-query, with vulnerable function os.ReadFile
*/
type PathTraversalGetBufferedQueryReadFile struct {
	Context *middleware.Context
	Handler PathTraversalGetBufferedQueryReadFileHandler
}

func (o *PathTraversalGetBufferedQueryReadFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPathTraversalGetBufferedQueryReadFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
