// Code generated by go-swagger; DO NOT EDIT.

package path_traversal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PathTraversaslFrontHandlerFunc turns a function with the right signature into a path traversasl front handler
type PathTraversaslFrontHandlerFunc func(PathTraversaslFrontParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PathTraversaslFrontHandlerFunc) Handle(params PathTraversaslFrontParams) middleware.Responder {
	return fn(params)
}

// PathTraversaslFrontHandler interface for that can handle valid path traversasl front params
type PathTraversaslFrontHandler interface {
	Handle(PathTraversaslFrontParams) middleware.Responder
}

// NewPathTraversaslFront creates a new http.Handler for the path traversasl front operation
func NewPathTraversaslFront(ctx *middleware.Context, handler PathTraversaslFrontHandler) *PathTraversaslFront {
	return &PathTraversaslFront{Context: ctx, Handler: handler}
}

/* PathTraversaslFront swagger:route GET /pathTraversal path-traversal pathTraversaslFront

front page of the Path Traversal Vulnerability

*/
type PathTraversaslFront struct {
	Context *middleware.Context
	Handler PathTraversaslFrontHandler
}

func (o *PathTraversaslFront) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPathTraversaslFrontParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
