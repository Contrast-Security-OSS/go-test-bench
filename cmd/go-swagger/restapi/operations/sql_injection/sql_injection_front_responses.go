// Code generated by go-swagger; DO NOT EDIT.

package sql_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SQLInjectionFrontOKCode is the HTTP code returned for type SQLInjectionFrontOK
const SQLInjectionFrontOKCode int = 200

/*
SQLInjectionFrontOK served front end for SQL Injection page of Swagger API

swagger:response sqlInjectionFrontOK
*/
type SQLInjectionFrontOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSQLInjectionFrontOK creates SQLInjectionFrontOK with default headers values
func NewSQLInjectionFrontOK() *SQLInjectionFrontOK {

	return &SQLInjectionFrontOK{}
}

// WithPayload adds the payload to the sql injection front o k response
func (o *SQLInjectionFrontOK) WithPayload(payload string) *SQLInjectionFrontOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sql injection front o k response
func (o *SQLInjectionFrontOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SQLInjectionFrontOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*
SQLInjectionFrontDefault error occured

swagger:response sqlInjectionFrontDefault
*/
type SQLInjectionFrontDefault struct {
	_statusCode int
}

// NewSQLInjectionFrontDefault creates SQLInjectionFrontDefault with default headers values
func NewSQLInjectionFrontDefault(code int) *SQLInjectionFrontDefault {
	if code <= 0 {
		code = 500
	}

	return &SQLInjectionFrontDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the SQL injection front default response
func (o *SQLInjectionFrontDefault) WithStatusCode(code int) *SQLInjectionFrontDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the SQL injection front default response
func (o *SQLInjectionFrontDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *SQLInjectionFrontDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
