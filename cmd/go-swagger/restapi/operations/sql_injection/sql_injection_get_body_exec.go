// Code generated by go-swagger; DO NOT EDIT.

package sql_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SQLInjectionGetBodyExecHandlerFunc turns a function with the right signature into a SQL injection get body exec handler
type SQLInjectionGetBodyExecHandlerFunc func(SQLInjectionGetBodyExecParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SQLInjectionGetBodyExecHandlerFunc) Handle(params SQLInjectionGetBodyExecParams) middleware.Responder {
	return fn(params)
}

// SQLInjectionGetBodyExecHandler interface for that can handle valid SQL injection get body exec params
type SQLInjectionGetBodyExecHandler interface {
	Handle(SQLInjectionGetBodyExecParams) middleware.Responder
}

// NewSQLInjectionGetBodyExec creates a new http.Handler for the SQL injection get body exec operation
func NewSQLInjectionGetBodyExec(ctx *middleware.Context, handler SQLInjectionGetBodyExecHandler) *SQLInjectionGetBodyExec {
	return &SQLInjectionGetBodyExec{Context: ctx, Handler: handler}
}

/* SQLInjectionGetBodyExec swagger:route GET /sqlInjection/Exec/body/{safety} sql_injection sqlInjectionGetBodyExec

demonstrates SQL Injection via body, with vulnerable function sqlite3.exec

*/
type SQLInjectionGetBodyExec struct {
	Context *middleware.Context
	Handler SQLInjectionGetBodyExecHandler
}

func (o *SQLInjectionGetBodyExec) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSQLInjectionGetBodyExecParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
