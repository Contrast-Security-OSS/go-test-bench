// Code generated by go-swagger; DO NOT EDIT.

package sql_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SQLInjectionFrontHandlerFunc turns a function with the right signature into a SQL injection front handler
type SQLInjectionFrontHandlerFunc func(SQLInjectionFrontParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SQLInjectionFrontHandlerFunc) Handle(params SQLInjectionFrontParams) middleware.Responder {
	return fn(params)
}

// SQLInjectionFrontHandler interface for that can handle valid SQL injection front params
type SQLInjectionFrontHandler interface {
	Handle(SQLInjectionFrontParams) middleware.Responder
}

// NewSQLInjectionFront creates a new http.Handler for the SQL injection front operation
func NewSQLInjectionFront(ctx *middleware.Context, handler SQLInjectionFrontHandler) *SQLInjectionFront {
	return &SQLInjectionFront{Context: ctx, Handler: handler}
}

/*
	SQLInjectionFront swagger:route GET /sqlInjection sql_injection sqlInjectionFront

front page of the SQL Injection vulnerability
*/
type SQLInjectionFront struct {
	Context *middleware.Context
	Handler SQLInjectionFrontHandler
}

func (o *SQLInjectionFront) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSQLInjectionFrontParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
