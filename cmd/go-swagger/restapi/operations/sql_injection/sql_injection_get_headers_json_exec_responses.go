// Code generated by go-swagger; DO NOT EDIT.

package sql_injection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SQLInjectionGetHeadersJSONExecOKCode is the HTTP code returned for type SQLInjectionGetHeadersJSONExecOK
const SQLInjectionGetHeadersJSONExecOKCode int = 200

/*SQLInjectionGetHeadersJSONExecOK returns the rendered response as a string

swagger:response sqlInjectionGetHeadersJsonExecOK
*/
type SQLInjectionGetHeadersJSONExecOK struct {

	/*The response when succesful query happens
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSQLInjectionGetHeadersJSONExecOK creates SQLInjectionGetHeadersJSONExecOK with default headers values
func NewSQLInjectionGetHeadersJSONExecOK() *SQLInjectionGetHeadersJSONExecOK {

	return &SQLInjectionGetHeadersJSONExecOK{}
}

// WithPayload adds the payload to the sql injection get headers Json exec o k response
func (o *SQLInjectionGetHeadersJSONExecOK) WithPayload(payload string) *SQLInjectionGetHeadersJSONExecOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sql injection get headers Json exec o k response
func (o *SQLInjectionGetHeadersJSONExecOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SQLInjectionGetHeadersJSONExecOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*SQLInjectionGetHeadersJSONExecDefault Error occured

swagger:response sqlInjectionGetHeadersJsonExecDefault
*/
type SQLInjectionGetHeadersJSONExecDefault struct {
	_statusCode int
}

// NewSQLInjectionGetHeadersJSONExecDefault creates SQLInjectionGetHeadersJSONExecDefault with default headers values
func NewSQLInjectionGetHeadersJSONExecDefault(code int) *SQLInjectionGetHeadersJSONExecDefault {
	if code <= 0 {
		code = 500
	}

	return &SQLInjectionGetHeadersJSONExecDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the SQL injection get headers Json exec default response
func (o *SQLInjectionGetHeadersJSONExecDefault) WithStatusCode(code int) *SQLInjectionGetHeadersJSONExecDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the SQL injection get headers Json exec default response
func (o *SQLInjectionGetHeadersJSONExecDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *SQLInjectionGetHeadersJSONExecDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
