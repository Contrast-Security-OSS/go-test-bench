# GENERATED CODE - DO NOT EDIT
# Generated at 2022-05-24T15:26:21Z. To re-generate, run the following in the repo root:
# go run ./cmd/go-swagger/regen/regen.go

consumes:
  - application/io.goswagger.go-test-bench.v1+json
info:
  description: An API built with go-swagger to generate intentionally vulnerable endpoints
  title: swagger-bench
  version: 1.0.0
produces:
  - application/io.goswagger.go-test-bench.v1+json
schemes:
  - http
swagger: "2.0"

paths:
  /:
    get:
      tags:
        - swagger-server
      operationId: root
      produces:
        - text/html
      responses:
        200:
          description: serves to display the root of the swagger API for the test bench
          schema:
            type: string
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/error"
  /cmdInjection:
    get:
      tags:
        - cmd_injection
      summary: front page of the Command Injection vulnerability
      operationId: CmdInjectionFront
      produces:
        - text/html
      responses:
        200:
          description: served front end for Command Injection page of Swagger API
          schema:
            type: string
        default:
          description: error occured
  /cmdInjection/Command/query/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - cmd_injection
      description: demonstrates Command Injection via query, with vulnerable function exec.Command
      operationId: CmdInjectionGetQueryCommand
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /cmdInjection/Command/cookies/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - cmd_injection
      description: demonstrates Command Injection via cookies, with vulnerable function exec.Command
      operationId: CmdInjectionGetCookiesCommand
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /cmdInjection/CommandContext/query/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - cmd_injection
      description: demonstrates Command Injection via query, with vulnerable function exec.CommandContext
      operationId: CmdInjectionGetQueryCommandContext
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /cmdInjection/CommandContext/cookies/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - cmd_injection
      description: demonstrates Command Injection via cookies, with vulnerable function exec.CommandContext
      operationId: CmdInjectionGetCookiesCommandContext
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured

  /xss:
    get:
      tags:
        - xss
      summary: front page of the Reflected XSS vulnerability
      operationId: XSSFront
      produces:
        - text/html
      responses:
        200:
          description: served front end for Reflected XSS page of Swagger API
          schema:
            type: string
        default:
          description: error occured
  /xss/Sink/query/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - xss
      description: demonstrates Reflected XSS via query, with vulnerable function _
      operationId: XSSGetQuerySink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /xss/Sink/buffered-query/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - xss
      description: demonstrates Reflected XSS via buffered-query, with vulnerable function _
      operationId: XSSGetBuffered-QuerySink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /xss/Sink/params/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - xss
      description: demonstrates Reflected XSS via params, with vulnerable function _
      operationId: XSSGetParamsSink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /xss/Sink/body/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - xss
      description: demonstrates Reflected XSS via body, with vulnerable function _
      operationId: XSSGetBodySink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /xss/Sink/buffered-body/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - xss
      description: demonstrates Reflected XSS via buffered-body, with vulnerable function _
      operationId: XSSGetBuffered-BodySink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /xss/Sink/response/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - xss
      description: demonstrates Reflected XSS via response, with vulnerable function _
      operationId: XSSGetResponseSink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured

  /ssrf:
    get:
      tags:
        - ssrf
      summary: front page of the Server Side Request Forgery vulnerability
      operationId: SsrfFront
      produces:
        - text/html
      responses:
        200:
          description: served front end for Server Side Request Forgery page of Swagger API
          schema:
            type: string
        default:
          description: error occured
  /ssrf/Sink/query/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - ssrf
      description: demonstrates Server Side Request Forgery via query, with vulnerable function _
      operationId: SsrfGetQuerySink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured
  /ssrf/Sink/path/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - ssrf
      description: demonstrates Server Side Request Forgery via path, with vulnerable function _
      operationId: SsrfGetPathSink
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured

  /unvalidatedRedirect:
    get:
      tags:
        - unvalidated_redirect
      summary: front page of the Unvalidated Redirect vulnerability
      operationId: UnvalidatedRedirectFront
      produces:
        - text/html
      responses:
        200:
          description: served front end for Unvalidated Redirect page of Swagger API
          schema:
            type: string
        default:
          description: error occured
  /unvalidatedRedirect/Redirect/query/{safety}: #TODO should input be a swagger parm?
    get:
      tags:
        - unvalidated_redirect
      description: demonstrates Unvalidated Redirect via query, with vulnerable function http.Redirect
      operationId: UnvalidatedRedirectGetQueryRedirect
      produces:
        - text/plain
      parameters:
        - $ref: "#/parameters/safetyParam"
        - name: input
          in: query #TODO how to handle other inputs
          description: the user provided input for the query vulnerability
          required: true
          type: string
      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured

definitions:
  item:
    type: object
    required:
      - description
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      description:
        type: string
        minLength: 1
      completed:
        type: boolean
  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string

parameters:
  commandParam:
    in: path
    name: command
    description: specify if exec.Command or exec.CommandContext should be invoked
    required: true
    type: string
    enum:
      - exec.Command
      - exec.CommandContext

  safetyParam:
    name: safety
    in: path
    description: safety qualifier
    required: true
    type: string
    enum:
      - safe
      - unsafe
      - noop
