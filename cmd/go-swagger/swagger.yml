consumes:
  - application/io.goswagger.go-test-bench.v1+json
info:
  description: An API built with go-swagger to generate intentionally vulnerable endpoints
  title: Go Swagger API integrated with Go Test Bench
  version: 1.0.0
produces:
  - application/io.goswagger.go-test-bench.v1+json
schemes:
  - http
swagger: "2.0"

paths:

  /:
    get:
      tags:
        - swagger-server
      operationId: root
#      produces:
#        - text/html
      responses:
        200:
          description: serves to display the root of the swagger API for the test bench
          schema:
            type: string
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/error"

  /cmdInjection:
    get:
      tags:
        - cmd-injection
      summary: supposed to serve the frontend for the query or cookie vulns
      operationId: cmdInjectionFront
#      produces:
#        - text/html
      responses:
        200:
          description: served front end for command injection page of Swagger API
          schema:
            type: string
        default:
          description: error occured

  #  QUERY + GET
  /cmdInjection/{command}/query/{safety}:
    get:
      tags:
        - cmd-injection
      description: |
        Demonstrates the command injection through user query
      operationId: getQueryExploit
      produces:
        - text/plain

      parameters:
        - $ref: '#/parameters/commandParam'
        - $ref: '#/parameters/safetyParam'

        -   name: input
            in: query
            description: the user provided input for the query vulnerability
            required: true
            type: string

      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured

# openAPI 2.0 does not seem provide good support for parameters through cookie
  /cmdInjection/{command}/cookies/{safety}/:
    post:
      tags:
        - cmd-injection
      description: |
        Demonstrates the command injection vulnerability with input through Cookie
      operationId: postCookiesExploit
      produces:
        - text/plain

      parameters:
        - $ref: '#/parameters/commandParam'
        - $ref: '#/parameters/safetyParam'

        -   name: input
            in: body
            description: the user provided input for the query vulnerability
            required: true
            schema:
              type: string

      responses:
        200:
          description: returns the rendered response as a string
          schema:
            type: string
            description: The response when succesful query happens
        default:
          description: Error occured

definitions:
  item:
    type: object
    required:
      - description
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      description:
        type: string
        minLength: 1
      completed:
        type: boolean
  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string

parameters:
  commandParam:
    in: path
    name: command
    description: specify if exec.Command or exec.CommandContext should be invoked
    required: true
    type: string
    enum:
      - exec.Command
      - exec.CommandContext

  safetyParam:
    name: safety
    in: path
    description: safety qualifier
    required: true
    type: string
    enum:
      - safe
      - unsafe
